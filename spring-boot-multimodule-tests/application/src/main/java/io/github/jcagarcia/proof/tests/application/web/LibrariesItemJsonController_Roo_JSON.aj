// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package io.github.jcagarcia.proof.tests.application.web;

import io.github.jcagarcia.proof.tests.application.web.LibrariesItemJsonController;
import io.github.jcagarcia.proof.tests.model.domain.Library;
import io.github.jcagarcia.proof.tests.service.api.LibraryService;
import io.springlets.web.NotFoundException;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;
import org.springframework.web.util.UriComponents;

privileged aspect LibrariesItemJsonController_Roo_JSON {
    
    declare @type: LibrariesItemJsonController: @RestController;
    
    declare @type: LibrariesItemJsonController: @RequestMapping(value = "/api/libraries/{library}", name = "LibrariesItemJsonController", produces = MediaType.APPLICATION_JSON_VALUE);
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param libraryService
     */
    @Autowired
    public LibrariesItemJsonController.new(LibraryService libraryService) {
        this.libraryService = libraryService;
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Library
     */
    @ModelAttribute
    public Library LibrariesItemJsonController.getLibrary(@PathVariable("library") Long id) {
        Library library = libraryService.findOne(id);
        if (library == null) {
            throw new NotFoundException(String.format("Library with identifier '%s' not found",id));
        }
        return library;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param library
     * @return ResponseEntity
     */
    @GetMapping(name = "show")
    public ResponseEntity<?> LibrariesItemJsonController.show(@ModelAttribute Library library) {
        return ResponseEntity.ok(library);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param library
     * @return UriComponents
     */
    public static UriComponents LibrariesItemJsonController.showURI(Library library) {
        return MvcUriComponentsBuilder
            .fromMethodCall(
                MvcUriComponentsBuilder.on(LibrariesItemJsonController.class).show(library))
            .buildAndExpand(library.getId()).encode();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param storedLibrary
     * @param library
     * @param result
     * @return ResponseEntity
     */
    @PutMapping(name = "update")
    public ResponseEntity<?> LibrariesItemJsonController.update(@ModelAttribute Library storedLibrary, @Valid @RequestBody Library library, BindingResult result) {
        
        if (result.hasErrors()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body(result);
        }
        library.setId(storedLibrary.getId());
        getLibraryService().save(library);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param library
     * @return ResponseEntity
     */
    @DeleteMapping(name = "delete")
    public ResponseEntity<?> LibrariesItemJsonController.delete(@ModelAttribute Library library) {
        getLibraryService().delete(library);
        return ResponseEntity.ok().build();
    }
    
}
