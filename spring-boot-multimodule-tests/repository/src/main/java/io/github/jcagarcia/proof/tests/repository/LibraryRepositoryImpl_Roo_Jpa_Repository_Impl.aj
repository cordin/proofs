// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package io.github.jcagarcia.proof.tests.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.github.jcagarcia.proof.tests.model.domain.Library;
import io.github.jcagarcia.proof.tests.model.domain.QLibrary;
import io.github.jcagarcia.proof.tests.repository.LibraryRepositoryCustom;
import io.github.jcagarcia.proof.tests.repository.LibraryRepositoryImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect LibraryRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: LibraryRepositoryImpl implements LibraryRepositoryCustom;
    
    declare @type: LibraryRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LibraryRepositoryImpl.NAME = "name";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LibraryRepositoryImpl.ADDRESS = "address";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Library> LibraryRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QLibrary library = QLibrary.library;
        
        JPQLQuery<Library> query = from(library);
        
        Path<?>[] paths = new Path<?>[] {library.name,library.address};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, library.name)
			.map(ADDRESS, library.address);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, library);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Library> LibraryRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QLibrary library = QLibrary.library;
        
        JPQLQuery<Library> query = from(library);
        
        Path<?>[] paths = new Path<?>[] {library.name,library.address};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(library.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, library.name)
			.map(ADDRESS, library.address);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, library);
    }
    
}
